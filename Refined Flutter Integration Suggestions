# Integrating Python with Flutter for YOLO Object Detection and TTS

This document provides detailed steps for integrating **Python** with **Flutter** to handle **YOLO object detection** and **text-to-speech (TTS)** while optimizing **app size and performance**. It also includes alternative solutions to reduce storage requirements.

---

## üìå **Option 1: Running Python Code Inside Flutter (****`flutter_pybridge`****)**

### ‚úÖ **Best for: Offline processing inside Flutter (no need for a server)**

### ‚ö†Ô∏è **Cons: Increases app size (Python must be bundled)**

### **Steps:**

1. **Install the ****`flutter_pybridge`**** package in Flutter:**

   ```bash
   flutter pub add flutter_pybridge
   ```

2. **Write a Python script (****`detector.py`****) for YOLO & TTS:**

   ```python
   from ultralytics import YOLO
   from gtts import gTTS
   import io
   import pygame

   model = YOLO("yolo-Weights/yolov8n.pt")
   pygame.mixer.init()

   def detect_and_speak(image_path):
       results = model(image_path)
       text = "Book detected!" if results else "No book found"
       tts = gTTS(text, lang="en")
       fp = io.BytesIO()
       tts.write_to_fp(fp)
       fp.seek(0)
       pygame.mixer.music.load(fp)
       pygame.mixer.music.play()
       return text
   ```

3. **Call Python from Flutter (****`main.dart`****)**:

   ```dart
   import 'package:flutter/material.dart';
   import 'package:flutter_pybridge/flutter_pybridge.dart';

   void main() async {
     WidgetsFlutterBinding.ensureInitialized();
     await PyBridge.ensureInitialized();
     runApp(MyApp());
   }

   class MyApp extends StatelessWidget {
     final py = PyBridge();

     Future<void> runDetection() async {
       final result = await py.runPythonFile(
         "detector.py", function: "detect_and_speak", args: ["image.jpg"]);
       print("Detection Result: $result");
     }

     @override
     Widget build(BuildContext context) {
       return MaterialApp(
         home: Scaffold(
           appBar: AppBar(title: Text("Flutter + Python")),
           body: Center(
             child: ElevatedButton(
               onPressed: runDetection,
               child: Text("Run YOLO Detection"),
             ),
           ),
         ),
       );
     }
   }
   ```

### **üõ†Ô∏è Storage Optimization for ****`flutter_pybridge`**

- **Remove unused Python libraries** before bundling.
- **Use ****`flutter_tts`**** instead of gTTS** to avoid online dependency.
- **Use a smaller YOLO model** (e.g., `yolov8n.tflite` instead of `yolov8.pt`).

---

## üìå **Option 2: Running Python as a Backend Server (FastAPI)**

### ‚úÖ **Best for: Offloading processing to a cloud server**

### ‚ö†Ô∏è **Cons: Requires an internet connection**

### **Steps:**

1. **Install FastAPI and dependencies in Python:**

   ```bash
   pip install fastapi uvicorn ultralytics gtts pygame
   ```

2. **Create a Python API (****`server.py`****) for YOLO and TTS:**

   ```python
   from fastapi import FastAPI
   from ultralytics import YOLO
   from gtts import gTTS
   import io
   import pygame

   pygame.mixer.init()
   model = YOLO("yolo-Weights/yolov8n.pt")
   app = FastAPI()

   @app.post("/detect")
   async def detect_book(image_path: str):
       results = model(image_path)
       text = "Book detected!" if results else "No book found"
       tts = gTTS(text, lang="en")
       fp = io.BytesIO()
       tts.write_to_fp(fp)
       fp.seek(0)
       pygame.mixer.music.load(fp)
       pygame.mixer.music.play()
       return {"message": text}
   ```

3. **Run the server:**

   ```bash
   uvicorn server:app --host 0.0.0.0 --port 8000
   ```

4. **Call the API from Flutter (****`main.dart`****)**:

   ```dart
   import 'package:http/http.dart' as http;
   import 'dart:convert';

   Future<void> detectBook() async {
     final response = await http.post(
       Uri.parse("http://your-server-ip:8000/detect"),
       headers: {"Content-Type": "application/json"},
       body: jsonEncode({"image_path": "image.jpg"}),
     );
     print(response.body);
   }
   ```

### **üõ†Ô∏è Storage Optimization for Server-Based Processing**

- Move **YOLO model & TTS processing to the server** to keep the app small.
- Compress images **before sending them to the API**.

---

## üìå **Option 3: Running YOLO On-Device with TFLite**

### ‚úÖ **Best for: Running YOLO & TTS locally without Python**

### ‚ö†Ô∏è **Cons: More difficult to set up**

### **Steps:**

1. **Convert YOLO to TensorFlow Lite:**

   ```bash
   yolo export model=yolov8n.pt format=tflite
   ```

2. **Use ****`tflite_flutter`**** in Flutter (****`pubspec.yaml`****)**:

   ```yaml
   dependencies:
     tflite_flutter: ^0.9.0
   ```

3. **Load and run YOLO in Flutter (****`main.dart`****)**:

   ```dart
   import 'package:tflite_flutter/tflite_flutter.dart';

   Future<void> runYOLO(String imagePath) async {
     final interpreter = await Interpreter.fromAsset("yolo.tflite");
     // Run detection logic
   }
   ```

4. **Use ****`flutter_tts`**** for offline speech synthesis:**

   ```dart
   import 'package:flutter_tts/flutter_tts.dart';

   FlutterTts tts = FlutterTts();
   Future<void> speak(String text) async {
     await tts.speak(text);
   }
   ```

### **üõ†Ô∏è Storage Optimization for TFLite Approach**

- **Use ****`flutter_tts`**** instead of gTTS** to reduce storage.
- **Use a quantized TFLite model** to reduce YOLO size from 5MB to \~1MB.
- **Optimize images before running inference** (resize to 320x320 instead of 640x640).

---

## üéØ **Final Recommendation**

| **Option**          | **Best For**                  | **Requires Internet?** | **Storage Impact** |
| ------------------- | ----------------------------- | ---------------------- | ------------------ |
| `flutter_pybridge`  | Running Python inside Flutter | ‚ùå No                   | ‚ö†Ô∏è Medium (\~50MB) |
| `FastAPI + Flutter` | Running Python on a server    | ‚úÖ Yes                  | ‚úÖ Low              |
| `TFLite + Flutter`  | Fully offline YOLO + TTS      | ‚ùå No                   | ‚úÖ Low (\~10MB)     |

üöÄ **Recommended:** Use **TFLite + ****`flutter_tts`** for the smallest and fastest app!



